[{"content":"I am writing this blog because I didn\u0026rsquo;t see any good blogs or articles while I was working to implement GitHub Oauth with JWT based Authentication in an Open-Source contribution at AnitaB.org Open Source. I hope you will like this blog.\nJWT (JSON Web Token) is an open, industry-standard RFC 7519 method for representing claims securely between two parties. It is a more secure and better way of authentication and authorization. You can read more about this here.\nInstalling Dependencies - Django As this tutorial is about social auth I am not going to explain how to set-up a Django project. You can refer Django docs for creating your Django app.\nThis is the most important point which other articles do not cover:\n If you are using djangorestframework-simplejwt in your project then you have to install dj-rest-auth and if you are using djangorestframework-jwt in your project then you have to install django-rest-auth.\n Run these commands to install additional dependencies:\npip install django-allauth # Use the below commands if your project uses djangorestframework-simplejwt. pip install djangorestframework-simplejwt pip install dj-rest-auth # If django-rest-framework-jwt is used then use below commands. pip install djangorestframework-jwt pip install django-rest-auth Note: djangorestframework-jwt is no longer maintained so I will suggest using djangorestframework-simplejwt.\nYou can read docs of django-allauth, djangorestframework-simplejwt, dj-rest-auth, djangorestframework-jwt and django-rest-auth for more information.\nIn this article, we are going to discuss the JWT authentication based on djangorestframework-simplejwt. For djangorestframework-jwt the implementation process is same but you have to use django-rest-auth instead of dj-rest-auth according to the docs. Configure Django Settings For using social authentication with REST API we have to change settings.py. The suggested changes or additions are mentioned below:\nINSTALLED_APPS = [ # Django and Rest Framework \u0026#34;django.contrib.admin\u0026#34;, \u0026#34;django.contrib.auth\u0026#34;, \u0026#34;django.contrib.contenttypes\u0026#34;, \u0026#34;django.contrib.sessions\u0026#34;, \u0026#34;django.contrib.messages\u0026#34;, \u0026#34;django.contrib.staticfiles\u0026#34;, \u0026#34;rest_framework\u0026#34;, \u0026#34;corsheaders\u0026#34; # For Social Authentications \u0026#34;dj_rest_auth\u0026#34;, \u0026#34;django.contrib.sites\u0026#34;, \u0026#34;allauth\u0026#34;, \u0026#34;allauth.account\u0026#34;, \u0026#34;allauth.socialaccount\u0026#34;, \u0026#34;allauth.socialaccount.providers.google\u0026#34;, \u0026#34;allauth.socialaccount.providers.facebook\u0026#34;, \u0026#34;allauth.socialaccount.providers.twitter\u0026#34;, \u0026#34;allauth.socialaccount.providers.github\u0026#34;, # Add your apps here ] SITE_ID = 2 REST_FRAMEWORK = { \u0026#34;DEFAULT_PERMISSION_CLASSES\u0026#34;: [\u0026#34;rest_framework.permissions.IsAuthenticated\u0026#34;], \u0026#34;DEFAULT_AUTHENTICATION_CLASSES\u0026#34;: ( \u0026#34;dj_rest_auth.jwt_auth.JWTCookieAuthentication\u0026#34;, \u0026#34;rest_framework.authentication.SessionAuthentication\u0026#34;, \u0026#34;rest_framework_simplejwt.authentication.JWTAuthentication\u0026#34;, ), } REST_USE_JWT = True SIMPLE_JWT = { \u0026#34;ACCESS_TOKEN_LIFETIME\u0026#34;: timedelta(days=2), \u0026#34;REFRESH_TOKEN_LIFETIME\u0026#34;: timedelta(days=30), } ACCOUNT_EMAIL_VERIFICATION = \u0026#34;none\u0026#34; Note: REST_USE_JWT = True is required for using JWT authorization in Social Authentications.\nDjango Views Django all-auth provides adapters for social auth. So we have to import these adapters. To know more about adapters read this.\nBoth dj-rest-auth and django-rest-auth have SocialLoginView which can be used to retrieve the token from social authentication.\nCode to implement different REST API auth views is mentioned below:\nfrom allauth.socialaccount.providers.github.views import GitHubOAuth2Adapter from allauth.socialaccount.providers.google.views import GoogleOAuth2Adapter from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter from allauth.socialaccount.providers.twitter.views import TwitterOAuthAdapter from allauth.socialaccount.providers.oauth2.client import OAuth2Client from dj_rest_auth.social_serializers import TwitterLoginSerializer from dj_rest_auth.registration.views import SocialLoginView from django.conf import settings class GithubLogin(SocialLoginView): authentication_classes = [] adapter_class = GitHubOAuth2Adapter callback_url = # \u0026lt;Your GitHub Callback URL\u0026gt; client_class = OAuth2Client class FacebookLogin(SocialLoginView): authentication_classes = [] adapter_class = FacebookOAuth2Adapter class GoogleLogin(SocialLoginView): authentication_classes = [] adapter_class = GoogleOAuth2Adapter class TwitterLogin(SocialLoginView): authentication_classes = [] serializer_class = TwitterLoginSerializer adapter_class = TwitterOAuthAdapter Django URL\u0026rsquo;s Add the defined views to serve to a particular url. The code to implement this is: urlpatterns += [ ..., path(\u0026#39;twitter/\u0026#39;, TwitterLogin.as_view(), name=\u0026#39;twitter_login\u0026#39;), path(\u0026#39;google/\u0026#39;, GoogleLogin.as_view(), name=\u0026#39;google_login\u0026#39;), path(\u0026#39;facebook/\u0026#39;, FacebookLogin.as_view(), name=\u0026#39;twitter_login\u0026#39;), path(\u0026#39;github/\u0026#39;, GithubLogin.as_view(), name=\u0026#39;twitter_login\u0026#39;) ]\nFinal Setup Now you can migrate by running this command: python manage.py migrate.\nCreate a superuser using python manage.py createsuperuser command and login into the Django admin site (http://localhost:8000/admin/). Navigate to the site model dashboard and add site i.e for development add localhost:8000 to the domain name and enter any value in the display name. You can refer the below image for more description:\n add site to django admin \nAfter saving this click on the object that you have created i.e. localhost:8000 and in the URL see whether the site_id is 2 or not. If it\u0026rsquo;s not two then change the site_id in settings.py to the observed value.\nAfter this step, the only step remaining is to add social applications. For this visit the social applications page on the admin site and add the configuration like client id and secret key inside this form and save the application. I have included the image for GitHub below but others are also the same.\n Social Applications Adding in Django .\nFor getting the credentials for adding social login you can follow the docs of providers.\nNow all the process for backend is done and after this, you have to use the URL defined in the above steps to get the access_token by making a POST request from the frontend.\nImage of GitHub Login View in drf:  Image of GitHub Login View in drf \nReact - Frontend In your React app, you have to call the API and use the retrieved access token to log in users.\nYou can make components of different login by following this for Google login, Facebook login, GitHub login, and Twitter login.\nAfter this, the only thing remaining is to call the API and get the access token. For this, you may need axios library. Use axios to call the API that we have made in previous steps and store the access token to make user log in to the frontend.\nFor code to implement this in React (frontend) you can refer this.\nThanks for reading this. I will post more content regarding this in the future.\n","date":"2021-03-04T00:00:00Z","image":"/p/social-login-with-django-rest-api-and-reactjs/cover_hu77072e623dc6cd55333aca0db1f7d4de_130306_120x120_fill_box_smart1_2.png","permalink":"/p/social-login-with-django-rest-api-and-reactjs/","title":"Social Login with Django REST API and ReactJS"}]